# Site
repository: sproogen/resume-theme
favicon: images/favicon.ico

# Content configuration version
version: 2

# Personal info
name: 이석희
title: Backend Developer
email: ttokey.lee@gmail.com
website: https://ttokey.github.io/

# Dark Mode (true/false/never)
darkmode: false

# Social links
github_username: ttokey
linkedin_username: ttokey
# Additional icon links
additional_links:
- title: 블로그
  icon: fas fa-blog
  url: https://velog.io/@ttokey

# Google Analytics and Tag Manager
# Using more than one of these may cause issues with reporting
# gtm: "GTM-0000000"
# gtag: "UA-00000000-0"
# google_analytics: "UA-00000000-0"

# About Section
about_title: About Me
about_profile_image: images/seokhee.jpeg
about_content: | # this will include new lines to allow paragraphs
  백엔드 개발자로 일하고 있는 이석희 입니다. 
  - 말이 많은 개발자입니다. 동료들과 커뮤니케이션을 하며 개발 얘기도 하고, 일상 얘기도 하는 것을 좋아합니다  
  - 개발자가 성장할 수 있는 개발문화에 관심이 많습니다
  - 대용량 트래픽 처리와, 개발자의 실수 없이 개발할 수 있도록 설계하는 것에 관심이 많습니다
  - 불편한 것을 참지 못합니다. 이를 해결하기 위한 방법을 고민하는 것을 좋아합니다

  주 스킬
  - <mark>Java</mark>
  - <mark>Spring Boot</mark> <mark>Junit</mark> <mark>Spring REST Docs</mark> <mark>Spring Data JPA</mark> <mark>Spring Cloud</mark> <mark>Spring Batch</mark>
  - <mark>Oracle</mark> <mark>MongoDB</mark> <mark>Memcached</mark> <mark>Redis</mark>  <mark>Apache Kafka</mark> <mark>PostgreSQL</mark>

content:
  - title: Career # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Tving
        caption: 2022.03 ~ 2024.02
        sub_title: Backend Developer
        quote: >
          회원, 정산 서비스 개발
        description: | # this will include new lines to allow paragraphs 
          - 개발 문화 개선 
          - AWS Proserve를 진행하며, 서비스의 Cloud화 진행
          - legecy framework를 개선하기 위하여, 신규 프로젝트 구성, 컨벤션, 개발 전반을 수행
          - 대용량 트래픽에 대응하기 위한, 서비스 개선 진행
          - <mark>Java</mark> <mark>Spring Boot</mark> <mark>Junit</mark> <mark>Redis</mark> <mark>Spring Data JPA</mark> <mark>Microservice Architecture</mark> <mark>MongoDB</mark> <mark>Oracle</mark> <mark>Spring Cloud</mark> <mark>Apache Kafka</mark>

      - layout: left
        title: 신한카드
        caption: 2019.01 ~ 2022.03
        sub_title: Backend Developer
        quote: >
          챗봇 서비스 개발
        description: | # this will include new lines to allow paragraphs 
          - 신한카드 채널을 통한 고객 상담 서비스 챗봇 운영
          - MSA 구조의 서비스 운영 및 개발
          - <mark>Java</mark> <mark>Spring Boot</mark> <mark>Spring Data JPA</mark> <mark>Microservice Architecture</mark> <mark>MongoDB</mark> <mark>Elastic Stack</mark> <mark>Spring Cloud</mark>


  - title: Projects # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: top-middle
        title: Tving
        caption: 2022.03 ~ 2024.02

      - layout: left
        title: 정산 서비스 개발
        caption: 2023.11 ~ 2024.02
        quote: >
          개인화 정산 데이터 설계 및 개발
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - 유저별 정산 데이터가 없어서, 개인화 정산 불가능
          - 도입 후
            - 유저별 정산 데이터를 생성하여, 개인화 정산 수행 1년 기준 약 700억원의 수익 예상
          - 도입 과정
            - 개인화 정산을 위한 데이터 설계, 프로젝트 설계 및 개발
              - CP(Contents Provider)의 많은 숫자로 인해 여러 개발자의 동시 개발을 위한 인터페이스 기반의 추상화 설계
            - 대용량 데이터 처리를 위한 Spring Batch 개발 및 개선             

      - layout: left
        title: 카프카 서비스 도입
        caption: 2023.09 ~ 2023.11
        quote: >
          대용량 트래픽 대응을 위한 변화과정
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - 비동기 방식의 API 서비스가 점점 많아지기 시작함
            - MSA방식으로 어플리케이션 설계가 변화하며 서비스간 통신 증가 및 DB 분리의 필요성이 생김
          - 도입 후
            - 비동기 방식의 API를 kafka를 통해 전달하기 시작함
            - DB분리 진행
          - 도입 과정
            - consume 과정에서의 문제 발생시 해결을 위하여, republishing(topic에 재 발행) 및 DLT(Dead Letter Topic)개념을 도입하여 유실되는 요청이 없도록 개발
            - 비동기 방식의 API를 카프카로 전달하는 과정에서 순서가 보장되어야 하는 로직에 대한 분석 및 대응
          
      - layout: left
        title: 서비스 Cloud화 진행
        caption: 2023.04 ~ 2023.07
        quote: >
          AWS Proserve를 진행하며 서비스들의 Cloud화 진행 및 모던 아키텍쳐 도입
        description: | # this will include new lines to allow paragraphs
          - AWS Cloud 서비스 도입 (ecs, ec2, AWS Secrets Manager 등)
          - log 정비를 통한 전사 서비스 로그 포맷 일원화
          - 성능 테스트를 통하여 필요한 서비스 자원 사전 확보(locust 활용)

      - layout: left
        title: 인증 서비스 개발
        caption: 2022.10 ~ 현재
        quote: >
          인증의 중앙화
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - 기존의 서비스는 세션이라는 개념이 없고, 고객 여부만을 판단할 수 있었음
            - 각각의 monolithic 프로젝트 및 앱 자체에서도 인증 로직을 중복으로 관리하여 보안상 이슈에 대응이 힘듦
          - 도입 후
            - 세션 관리가 되어 전체 로그아웃 등의 계정 관리를 할 수 있게 됨
            - 인증서비스를 하나의 프로젝트로 분리하고 Gateway를 통하여 인증 일원화  
          - <티빙 인증서비스 개발기, 근데 이제 레디스를 곁들인> 라는 주제로 티빙 DevDay(사내 개발자 컨퍼런스) 발표 진행

      - layout: left
        title: 게이트웨이 서비스 개발
        caption: 2022.10 ~ 2023.06
        quote: >
          인증서비스 도입 및 API 라우팅 관리
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - 인증서비스를 도입 하기 위하여, 각 서비스로 통하는 하나의 통로가 필요해 짐
          - 도입 후
            - 인증 필터를 개발하여 인증이 필요한 API, 필요 없는 API를 구분하여 서비스를 제공
            - 게이트웨이를 도입함으로써, APP에서 API 주소 변경 없이 API 라우팅 주소 관리 및 version 관리가 가능

      - layout: left
        title: 신규 회원 프로젝트 개발
        caption: 2022.06 ~ 현재
        quote: >
          Monolithic 아키텍쳐의 MSA화 시작
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - Module간 의존성이 있는 Monolithic 아키텍쳐 구성
            - Java 6 및 Spring Framework 3버전 등 노후화된 서비스 버전으로 인한 신규 개발의 장벽
            - Oracle Procedure로 개발되어 있는 서비스로 인한, Oracle 의존성 높음
          - 도입 후
            - MSA 아키텍쳐 설계로 module간 의존성 분리 및 서비스 확장에 용의
            - Java 11 및 Spring Boot Framework 도입으로 code refactoring 진행 및 테스트 코드 작성 시작
            - Spring Date JPA 를 도입하여 Oracle 의존성을 끊어냄

      - layout: left
        title: 공통 기반 서비스 개발
        quote: >
          MSA 서비스를 개발하는 과정에서, 팀 내 다양한 convention을 수용할 수 있는 Library를 개발
        description: | # this will include new lines to allow paragraphs
          - 공통 EnumConverter 개발
            - 인터페이스 및 추상클래스 활용한 공통 AttributeConverter - Spring Data JPA를 활용한 Entity 의 Enum 필드 converter 개발
          - Logging filter 개발
            - API Servlet Filter, Feign Logging Filter, Repository Logging Filter 등을 개발하여 환경변수로 log on/off 를 할 수 있도록 개발
          - 공통 Exception 개발
            - 공통 응답문 포맷에 활용 될 수 있도록 Exception Builder를 개발하여, http status, code custom 및 다국어 처리가 가능한 message 전달 가능하도록 개발 

      - layout: top-middle
        title: 신한카드
        caption: 2019.01 ~ 2022.03

      - layout: left
        title: 데이터 비교 및 이관 서비스 개발
        caption: 2021.08 ~ 2022.02
        quote: >
          운영의 불편함을 해소하기 위한 서비스 개발
        description: | # this will include new lines to allow paragraphs
          - 도입 전
            - 챗봇 운영을 위한 응답문 Data 배포 과정이 환경별 수동으로 진행되어 오랜 시간이 걸림
            - 응답문 Data 이관시 누락건 발생
          - 도입 후
            - 응답문 Data 이관 서비스 개발
            - 2~3개월에 한번 꼴로 발생하던 Data 이관시 누락되는 건 해결
            - 데이터 비교 및 수정에 걸리는 시간 단축
            - <mark>React</mark>를 활용한 Admin 화면 개발

      - layout: left
        title: ElasticSearch index 관리용 Admin 서비스 개발
        caption: 2021.04 ~ 2021.05
        quote: >
          ElasticSearch를 챗봇의 NLU로 활용 할 수 있는 연동 서비스 개발.
        description: | # this will include new lines to allow paragraphs
          - ElasticSearch 학습 문장 관리 API 개발
          - ElasticSearch 활용 의도분류 API 개발

      - layout: left
        title: 챗봇 서비스 운영 및 개발
        caption: 2019.01 ~ 2022.02
        quote: >
          챗봇 서비스 개발 및 운영
        description: | # this will include new lines to allow paragraphs
          - 신한은행 챗봇 연동 딥링크
            - 신한은행 이용자가 마지막으로 질문한 내용을 신한카드 챗봇에서 바로 이어 할 수 있는 동적 딥링크 기획 및 개발
          - 비로그인 서비스
            - 로그인을 해야만 이용 가능 했던 챗봇을 비로그인 이용자도 이용할 수 있도록 기획 및 개발
          - 채널확장
            - 결제앱 에서만 이용 가능 했던 챗봇의 채널 확장(홈페이지 앱, 웹) 기획 및 개발
          - 개인화 인터페이스 개발
            - 계정계 시스템 연동 인터페이스 설계 및 개발

  - title: Experience # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Spring Batch 성능 개선
        quote: >
          개인화 정산을 위한 대용량 데이터 Spring Batch 개발
        description: | # this will include new lines to allow paragraphs
          - JPA Repository + Pagination 조합으로 서비스 개발
            - 700만건 데이터 기준 12시간 이상의 수행 시간 소요
          - Partitioning 추가
            - 서비스 수행 시간 15분 이내로 단축 됨
            - Partitioning 별로 DB connection을 유지하여 다량의 connection pool 소요
            - Partitioning 위한 유저 번호 mod 쿼리를 수행하다 보니 쿼리 수행이 느림을 확인
          - Partitioning 제거 및 JDBC + Cursor 방식 도입
            - 서비스 수행 시간 3분 이내로 단축
            - DB connection pool 가용량 확보
            - mod 쿼리 제거로 인한 쿼리 수행 속도 상승

      - layout: left
        title: 성능테스트와 인프라
        quote: >
          AWS Proserve 팀과 성능테스트를 진행하며 겪은 경험
        description: | # this will include new lines to allow paragraphs
          - 기존 방식
            - tps 정도의 목표값을 정한 후 부하를 올리며 목적에 맞는 tps 도달하면 성능 테스트 성공
          - 도입 방식
            - SLO(서비스 수준 목표), SLI(서비스 수준 지표)를 정의하여 P99, TPS, Median 등의 다양한 지표값 선 정의
            - 어플리케이션 테스트
              - 통신 방법의 다각화(vpn 통신, public domain 통신)를 통하여 장애 발생 시 빠른 대응 및 선 검증 진행
              - Cache server 이슈를 대응하기 위한 방어로직 개발
            - 인프라 테스트
              - 네트워크 페일오버 테스트, cpu 및 memory관리, DNS lookup cache 도입 등 다양한 인프라 관리 포인트 확인
            - DB 테스트 
              - DB 환경 설정(mongoDB readPreference, writeConcern 등) 변경에 따른 성능 테스트
              - oracle connection pool 1개당 tps 30정도의 대응 시간을 갖추고 있는 것을 파악 후 SLO에 적합한 connection 수 산정

      - layout: left
        title: 대용량 트래픽 처리
        quote: >
          대용량 요청이 들어오는 경우에 생기는 문제를 해결
        description: | # this will include new lines to allow paragraphs
          - Http connection pool 도입
            - 특정 api call의 duration이 높아 was thread를 다 활용 하여서 처리하지 못하여 api별 pool 제한을 걸어둠으로써 특정 서비스 호출로 인한 서비스 중단 방어
          - 동시성 문제 해결
            - Spring JPA 도입 이후 save method를 통한 insert API의 경우 동시성 문제가 발생하기 시작 함
            - 원인
              - save method의 동작은 DB의 값이 없는 경우 insert, 값이 있는 경우 update query를 날리게 됨. 서로 다른 트랜잭션 시작점에 데이터가 없는 경우 둘다 insert요청을 날리면서 PK가 겹치는 상황이 발생함.
            - 해결방안
              - update를 진행 할 수 있도록 회원 가입 시 처음부터 data 생성로직 추가
              - 필요한 경우 DB Lock을 통한 동시성 문제 해결
              - 요청에 대한 유실을 막기 위하여, DB insert/upsert과정에서 생기는 error를 Spring Retry library를 활용하여 유실 방지

      - layout: left
        title: Redis 활용하기
        quote: >
          Redis secondary index
        description: | # this will include new lines to allow paragraphs
          - Redis Secondary Index 도입 및 실패기
            - 도입 이유
              - redis를 활용하며 key 이외에 value를 활용하기 위하여 Redis Secondary Indexing 활용 및 도입 
            - 도입 과정
              - jmh를 통한 성능 index 사용 유무에 따른 성능 비교 하여(초당 300건 정도를 처리 할 수 있도록 성능 테스트 진행) 성능이 차이 나지 않음을 확인 및 개발 편의상 Secondary Indexing을 활용 하기로 결정 
              - <티빙 인증서비스 개발기, 근데 이제 레디스를 곁들인> 라는 주제로 Redis Secondary Indexing의 동작 방식 및 활용 방법에 대하여 티빙 DevDay(사내 개발자 컨퍼런스) 발표 진행
            - 문제 발생
              - spring data redis 를 활용하여 secondary indexing 활용 시 keyspace event 를 통해 ttl 만료된 키 값을 관리하게 되는데, 서비스 사용량이 늘자 redis의 keyspace event 발행량이 늘어나며 redis connection timeout이 발생
            - 결론
              - ttl이 짧고, 많은 양의 key값이 generate 되는 서비스에서는 secondary indexing 사용 불가능. 다만, ttl 이 길고, 많은 양의 key 값 보다는 key값의 갯수가 적은 경우에 적극 활용하도록 함.
              - jmh를 통한 성능 테스트는 데이터의 삭제/생성에만 집중했지, ttl이 만료되는 상황에서의 성능테스트를 고려하지 못함.

      - layout: left
        title: 휴면 에러가 없는 코드 작성
        quote: >
          "아무리 뛰어난 개발자라도, 실수는 할 수 있다"라는 생각
        description: | # this will include new lines to allow paragraphs
          - Cache 생명주기 관리
            - EntityListener를 활용하여 Entity의 값이 변경되는 경우 자동으로 관련된 Cache를 삭제하도록 개발. EntityListener를 활용하는 경우 Transaction의 마지막에 진행되나, commit 전에 진행되어 DB와의 동기화가 확실하지 않는 경우를 확인하여, TransactionSynchronizationManager 를 활용하여 commit 시점 이후에 cache가 삭제 되도록 관리
          - Cache 버전 관리 
            - cache의 필드값을 변경하는 경우 기존에 적재된 cache를 읽어오며 역직렬화 과정에서 error가 발생하는 경우가 생김. 이를 해결하기 위하여 class의 field를 이용하여 Hash값을 keyspace로 생성하여 cache의 필드가 변경된 경우 keyspace가 자동으로 달라지게 함.(기존의 cache는 TTL로 인한 만료)

      - layout: left
        title: 개발문화 개선
        quote: >
          개발자가 성장할 수 있는 개발 문화 도입
        description: | # this will include new lines to allow paragraphs
          - 프로젝트가 끝나면 진행하는 코드리뷰를, MR 단위로 하는 것으로 제안하고 도입
          - Test Code의 활용 방법을 공유하며, 팀원들이 Test Code를 작성 할 수 있도록 독려 
            - Test Coverage 90% 이상 유지
            - restdocs-api-spec 라이브러리를 활용하여 Spring Rest Doc 작성
          - Coding Convention 및 Layer Convention 등을 정의하여 서로 다른 개발자들의 하나의 포맷으로 개발 할 수 있도록 장려
            - 코드리뷰를 통해 개발자 모두가 convention에 대한 숙지 및 이해가 될 수 있도록 진행         
          - AWS Proserve Application Architect와의 모던 아키텍쳐 컨퍼런스 진행
            - AWS Proserve 대응 담당자로써, 업무를 진행하며 Application Architect와 대화를 하면 팀원들도 많은 발전이 생길 것 같다는 판단이 들어 컨퍼런스 요청
            - DDD, TDD 등에 대한 설명과 함께 팀원들과 개발 컨벤션에 대한 정의 재구성 및 스터디 진행
          

  - title: Education # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: 숭실대학교
        caption: 2011 - 2018
        sub_title: 정보통신전자공학부 IT융합전공
        description: | # this will include new lines to allow paragraphs
          학우들과 함께 진행하는 프로젝트에 관심이 많아 자료구조 조교, 교내 캡스톤디자인 경진대회 장려상 수상, 2017 ACM-ICPC 교내 16등(전체 약 40여개 팀) 등 다양한 경험을 하며 지냈습니다.



  - title: A Little More About Me
    layout: text
    content: | # this will include new lines to allow paragraphs
      - 1일 1알고리즘 풀기 챌린지(레벨 2에서는 더 이상 풀 문제가 없어서 잠시 쉬는 중)를 하여 2023년 9월 11일 기준 프로그래머스 알고리즘 테스트 순위 790위 입니다
      - 개발하는 것을 좋아하여 한창 집중 할 때에는 꿈을 꾸면서도 프로젝트 설계를 하고 아침에 "유레카" 를 외치며 일어날 때 뿌듯해 합니다
      - 같은 백엔드 개발자인 와이프와 함께 개발에 관하여 이야기 하는 것을 좋아합니다.(와이프가 좋아하지는 않는 것 같습니다)
      - 책읽는 것을 좋아하지만, 잘 읽지 않는 게으른 저를 위해 최근에 태블릿 거치대를 구매하여 침대맡에 두고 하루 최소 1페이지 읽기 챌린지를 진행중입니다 
      - 스킨스쿠버, 캠핑 및 여행 등 밖으로 돌아다니는 활동도 좋아합니다. (장비빨 최고)


# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
remote_theme: sproogen/resume-theme

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag
